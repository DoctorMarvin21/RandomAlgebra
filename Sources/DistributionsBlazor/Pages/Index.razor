@page "/"
@inherits MainComponent
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces

<MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" Class="ma-4">
    <MudTabPanel Text="Evaluation">
        <MudPaper Square="true" Elevation="0" Class="d-flex flex-column gap-4 pa-4">
            <MudTextField Label="Model"
                Margin="MudBlazor.Margin.Dense" Variant="Variant.Outlined"
                @bind-Value="Configuration.Expression" />
            <MudTable Items="Configuration.ExpressionArguments" Style="width:min-content;" Dense="true" Hover="false">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Distributions</MudText>
                    <MudSpacer />
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" DisableElevation="true" Size="Size.Small"
                        OnClick="DistributionsDialogProvider.AddArgument"/>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Argument</MudTh>
                    <MudTh>Distribution</MudTh>
                    <MudTh>Parameters</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Argument</MudTd>
                    <MudTd>@context.SettingsType.Name</MudTd>
                    <MudTd>@context.DistributionSettings</MudTd>
                    <MudTd>
                        <div class="d-flex gap-2">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                                OnClick="() => DistributionsDialogProvider.EditArgument(context)"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                                OnClick="() => DistributionsDialogProvider.DeleteExpressionArgument(context)"></MudIconButton>
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <MudButton Disabled="IsInProgress"
                Style="width:100px;"
                Variant="Variant.Filled" DisableElevation=true Color="Color.Primary"
                OnClick="Process">Evaluate</MudButton>

            @if (EvaluationError != null)
            {
                <MudAlert Severity="Severity.Error">@EvaluationError</MudAlert>
            }

            @if (IsInProgress)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />   
            }
        </MudPaper>
    </MudTabPanel>
    <MudTabPanel Text="Settings">
        <MudPaper Square="true" Elevation="0" Class="d-flex flex-wrap gap-4 pa-4">
            <MudPaper Elevation="3" Class="d-flex flex-column gap-4 pa-4">
                <MudText Typo="Typo.subtitle2">
                    Common Parameters
                </MudText>
                <MudNumericField Label="Probability" Step=".1" Format="F3" Min=0 Max=1
                    @bind-Value=Configuration.Probability>
                </MudNumericField>
                <MudNumericField Label="Chart Points" Min=1 Max=100000
                    @bind-Value=Configuration.ChartPoints>
                </MudNumericField>
            </MudPaper>
            <MudPaper Elevation="3" Class="d-flex flex-column gap-4 pa-4">
                <MudCheckBox Dense="true" Color="Color.Primary" Size="Size.Small"
                    @bind-Checked="Configuration.EvaluateRandomAlgebra">
                    <MudText Typo="Typo.subtitle2">
                        Random Algebra
                    </MudText>
                </MudCheckBox>
                <MudNumericField Label="Samples" Min=1 Max=100000
                    Disabled=@(!Configuration.EvaluateRandomAlgebra)
                    @bind-Value=Configuration.Samples>
                </MudNumericField>
            </MudPaper>
            <MudPaper Elevation="3" Class="d-flex flex-column gap-4 pa-4">
                <MudCheckBox Dense="true" Color="Color.Primary" Size="Size.Small"
                    @bind-Checked="Configuration.EvaluateMonteCarlo">
                    <MudText Typo="Typo.subtitle2">
                        Monte Carlo
                    </MudText>
                </MudCheckBox>
                <MudNumericField Label="Experiments" Min=1 Max=100000000
                    Disabled=@(!Configuration.EvaluateMonteCarlo)
                    @bind-Value=Configuration.Experiments>
                </MudNumericField>
                <MudNumericField Label="Pockets" Min=1 Max=100000
                    Disabled=@(!Configuration.EvaluateMonteCarlo)
                    @bind-Value=Configuration.Pockets>
                </MudNumericField>
            </MudPaper>
        </MudPaper>
    </MudTabPanel>
</MudTabs>

@if (IsCalculated)
{
    <MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" Class="ma-4">
        <MudTabPanel Text="Probability Density Function">
            <MudPaper Square="true" Elevation="0" Class="pa-2">
                <PlotlyChart @bind-Config="config" @bind-Layout="layout" @bind-Data="PdfData" />
            </MudPaper>
        </MudTabPanel>
        <MudTabPanel Text="Cumulative Distribution Function">
            <MudPaper Square="true" Elevation="0" Class="pa-2">
                <PlotlyChart @bind-Config="config" @bind-Layout="layout" @bind-Data="CdfData" />
            </MudPaper>
            
        </MudTabPanel>
        <MudTabPanel Text="Results">
            <MudPaper Square="true" Elevation="0" Class="pa-4">
                <MudTable Items="Results.DistributionParameters" Dense="true" Hover="false">
                    <HeaderContent>
                        <MudTh>Parameter</MudTh>
                        <MudTh>Random Algebra</MudTh>
                        <MudTh>Monte Carlo</MudTh>
                        <MudTh>Ratio, %</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@context.RandomsAlgebra</MudTd>
                        <MudTd>@context.MonteCarlo</MudTd>
                        <MudTd>@context.PersentRatio</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudTabPanel>
    </MudTabs>
}

<MudDialog @bind-IsVisible="DistributionsDialogProvider.IsDialogOpen" Options="@editDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Edit Distribution
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex flex-column gap-4">
            <MudTextField Variant="Variant.Outlined"
                @bind-Value="@DistributionsDialogProvider.ExpressionArgument.Argument" />
            <div>
                <MudSelect @bind-Value="@DistributionsDialogProvider.ExpressionArgument.SettingsType"
                    Variant="Variant.Outlined"
                    Label="Distribution">
                    @foreach (var item in DistributionsDialogProvider.ExpressionArgument.SettingTypes)
                    {
                        <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </div>

            @foreach (var item in DistributionsDialogProvider.ExpressionArgument.DistributionSettingsBindings)
            {
                <MudTextField Label="@item.Name" Variant="Variant.Outlined"
                    @bind-Value="item.Value" />
            }
        </div>
    </DialogContent>
    <DialogActions>
        <div class="d-flex gap-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation=true
                OnClick="DistributionsDialogProvider.DialogOK">OK</MudButton>

            @if (DistributionsDialogProvider.DialogMode == DialogMode.Add)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation=true
                    OnClick="DistributionsDialogProvider.DialogCancel">Cancel</MudButton>
            }
        </div>
    </DialogActions>
</MudDialog>

@code {
    DialogOptions editDialogOptions = new() { FullWidth = true };
    Config config = new Config { Responsive = true };

    Layout layout = new Layout
    {
        Legend = new Plotly.Blazor.LayoutLib.Legend { Orientation = Plotly.Blazor.LayoutLib.LegendLib.OrientationEnum.H }
    };
}